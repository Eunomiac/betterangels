import{gsap as t,MotionPathPlugin as e,U as i}from"../helpers/bundler.mjs";export default class s{static get t(){return{i:"basic"}}static get h(){return{o:"xElem",g:["x-elem"],u:this.t.i,l:{position:"absolute",p:-50,m:-50,transformOrigin:"50% 50%"},T:{$:"<div></div>",id:"x-container",parent:$(".vtt.game")[0],P:["x-container"],properties:{position:"absolute",p:0,m:0,transformOrigin:"0% 0%"}}}}static get T(){return s.A||(s.A=new s($(s.h.T.$),{properties:{...s.h.l,...s.h.T.properties},parent:s.h.T.parent,P:s.h.T.P}),s.A.R.O("id",s.h.T.id),s.A.L=s.h.T.id,s.A.N=s.h.T.id),s.A}static get j(){return this.I=this.I??{}}static get S(){return Object.values(this.j)}static _(t){return this.j[t.name]=t}static v(t){delete this.j[t.name]}static D(t){if(t.options?.name){if(t.options.name in this.j)throw new Error(`'${t.options.name}' has already been registered as an ${t.constructor.name}.`);return t.options.name}const e=i.C(i.M(this.S.filter((e=>e.constructor.name===t.constructor.name&&e.G===t.G&&e.H===t.H)))?.name?.match(/\d+$/)?.pop())+1;return`${t.constructor.h.o}-${t.G}_${t.H}_${e}`}get(e){return t.Y(this.q,e)}set(e={}){t.set(this.q,e)}get options(){return this.F=this.F??{}}constructor(t,{properties:e={},U:r=i.X(),type:h=this.constructor.h.u,parent:n,P:o=[],...a}={}){if(!("k"in t))throw new Error(`${this.constructor.name} must be instantiated with a jQuery object.`);{let g;if((n=n??t.J()[0]??this.constructor.T)instanceof s?(this.B=n,g=n.q):"k"in n?[g]=n:n instanceof HTMLElement&&(g=n),!t.J[0]){if(!g)throw new Error("XElems must be existing DOM elements, or provide a parent to append to.");t.K(g)}this.V=t,[this.W]=this.R,this.G="string"===i.getType(r)?r:r.id,this.type=h,this.F=a,this.L=this.constructor.D(this),this.N=this.L,this.R.O("id",this.N),this.P=[...a.Z?[]:this.constructor.h.g,...o],this.constructor._(this),this.set(i.tt({...this.constructor.h.l,...e},(t=>null!==t)))}}get R(){return this.V}get q(){return this.W}get name(){return this.L}get et(){return this.L.replace(/^.+_([^_]+_\d+)$/,"$1")}get id(){return this.N}get it(){return this.st=this.st??`#${this.id}`}get tag(){return this.q.tagName}get U(){return game.users.get(this.G)}get type(){return this.H}set type(t){if(!Object.values(this.constructor.t).includes(t))throw new Error(`Invalid ${this.constructor.name} Type: ${t}`);this.H=t}rt(){this.R.remove()}get x(){return this.get("x")}set x(t){this.set({x:t})}get y(){return this.get("y")}set y(t){this.set({y:t})}get ht(){return{x:this.x,y:this.y}}set ht({x:t,y:e}){this.set({x:t,y:e})}get nt(){return this.ot(s.T)}get left(){return this.x-.5*this.width}set left(t){this.x=t+.5*this.width}get top(){return this.y-.5*this.height}set top(t){this.y=t+.5*this.height}get right(){return this.x+.5*this.width}set right(t){this.x=t-.5*this.width}get bottom(){return this.y+.5*this.height}set bottom(t){this.y=t-.5*this.height}get height(){return this.get("height")}set height(t){this.set({height:t})}get width(){return this.get("width")}set width(t){this.set({width:t})}get gt(){return(this.height+this.width)/4}set gt(t){const e=t/this.gt;this.set({height:this.height*e,width:this.width*e})}get rotation(){return i.ut(t.Y(this.q,"rotation"),[-180,180])}set rotation(e){if(/^[+-]=/.test(`${e}`)&&(e=this.rotation+i.lt(`${e}`.replace(/=/g,""))),!["int","float"].includes(i.getType(e)))throw new Error(`Cannot set rotation to a non-number value: ${JSON.stringify(e)}`);t.set(this.q,{rotation:e})}ct(t){return t instanceof s&&(t=t.nt),i.dt(i.xt(this.nt,t)+90)}ft(t){return i.yt(this.rotation,this.ct(t))}wt(t){return t instanceof s&&(t=t.nt),i.Tt(this.nt,t)}$t({x:t,y:e}){return i.Tt(this,{x:t,y:e})}ot(t,i){return i=i??this.ht,e.Et(this.parent.q,t.q,i)}bt(t){return e.Et(this.parent.q,t.q,this.ht)}Pt(t,i){return e.Et(this.q,t.q,i)}At(t,i){return e.Et(s.T.q,t.q,i)}get parent(){return this.B}set parent(t){if(!(t instanceof s))throw new Error(`[${this.constructor.name}.parent] No element found for '${t}'`);{const{x:e,y:i}=this.bt(t);this.R.K(t.q),this.B=t,this.set({x:e,y:i})}}get P(){return this.q.classList}set P(t){"string"===i.getType(t)&&(t=t.trim().split(/\s+/));const e=[...this.constructor.h.g,...t];Array.from(this.P).filter((t=>!e.includes(t))).forEach(this.P.remove),t.forEach((t=>this.P.add(t)))}get text(){return this.get("innerText")}set text(t){this.set({innerText:t})}get $(){return this.get("innerHTML")}set $(t){this.set({innerHTML:t})}}